/* this component contain : employee information, lead generation table, lead generation form

Employee information : only display basic information of your profile.

Lead generation table : contain all of the leads that is generated by yourself along with seach, updation of the field and delete operation.

Lead generation form : for entering the information of new lead. */

import { faEdit, faIdBadge, faTrash } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faTimes, faBars } from "@fortawesome/free-solid-svg-icons";
import React, { useContext, useEffect, useState } from "react";
import RotatingTrianglesComp from "../Global/utils/RotatingTriangles";
import moment from "moment";
import createSomeContext from "../../context/createSomeContext";
import { toast } from "react-toastify";
import {
  Popover,
  PopoverTrigger,
  PopoverContent,
  PopoverHeader,
  PopoverBody,
  Button,
  PopoverArrow,
  PopoverCloseButton,
} from "@chakra-ui/react";
import ProvideSidebar from "../Global/ProvideReqComp/ProvideSidebar";

export default function LeadGeneration() {
  const {
    openSidebar, setOpenSidebar, // for opeining and closing sidebar in big devices

    profileData,
    generateNewLead,
    showGeneratedLeadsByAnyOnePerson,
    updateLeadGenerationDataField,
    deleteLeadByDBId,
  } = useContext(createSomeContext);

  const [loading, setLoading] = useState(false);
  const [openTable, setOpenTable] = useState(true);
  const [tableData, setTableData] = useState();
  const [copyOfTableData, setCopyOfTableData] = useState();
  const [total, setTotal] = useState(0);
  const [text, setText] = useState("");

  const [startDate, setStartDate] = useState(
    moment(new Date()).subtract(1, "month").format("YYYY-MM-DD")
  );
  const [endDate, setEndDate] = useState(
    moment(new Date()).format("YYYY-MM-DD")
  );

  // for lead generation form
  const [credentials, setCredentials] = useState({
    clientName: "",
    clientDesignation: "",
    clientOrganisation: "",

    clientMobileNumber: "",
    clientWhatsappNumber: "",
    clientMailId: "",

    serviceCategories: "Web-Development",
    demand: "",
    firstConversationDate: "",
  });

  // //! handle open table or form
  const handleTab = () => {
    setOpenTable(!openTable);
  };

  // //! ..............................................Lead Generation Table ......................................
  // //! load data in table
  const fetchData = async () => {
    setLoading(true);
    const res = await showGeneratedLeadsByAnyOnePerson(
      profileData._id,
      startDate,
      endDate
    );
    const json = await res.json();
    console.log(json);
    if (json.success === true) {
      setTableData(json.data);
      setCopyOfTableData(json.data);
      setTotal(json.data.length);
    } else {
      toast.error(json.message);
    }
    setLoading(false);
  };
  useEffect(() => {
    if (profileData) {
      fetchData();
    }
    // eslint-disable-next-line
  }, [profileData]);

  // //!  handle search in table
  const handleSearch = () => {
    if (!text.length) {
      return;
    }
    const filteredData =
      copyOfTableData &&
      copyOfTableData.filter(
        (item) =>
          (item.leadGenerationDate &&
            item.leadGenerationDate
              .toString()
              .toLowerCase()
              .includes(text.toLowerCase())) ||
          (item.bucket &&
            item.bucket.toLowerCase().includes(text.toLowerCase())) ||
          (item.remarks &&
            item.remarks.toLowerCase().includes(text.toLowerCase())) ||
          (item.status &&
            item.status.toLowerCase().includes(text.toLowerCase())) ||
          (item.clientName &&
            item.clientName.toLowerCase().includes(text.toLowerCase())) ||
          (item.clientDesignation &&
            item.clientDesignation
              .toLowerCase()
              .includes(text.toLowerCase())) ||
          (item.clientMobileNumber &&
            item.clientMobileNumber
              .toLowerCase()
              .includes(text.toLowerCase())) ||
          (item.clientWhatsappNumber &&
            item.clientWhatsappNumber
              .toLowerCase()
              .includes(text.toLowerCase())) ||
          (item.clientMailId &&
            item.clientMailId.toLowerCase().includes(text.toLowerCase())) ||
          (item.serviceCategories &&
            item.serviceCategories
              .toLowerCase()
              .includes(text.toLowerCase())) ||
          (item.demand &&
            item.demand.toLowerCase().includes(text.toLowerCase())) ||
          (item.firstConversation &&
            item.firstConversation.date &&
            item.firstConversation.date
              .toLowerCase()
              .includes(text.toLowerCase())) ||
          (item.firstConversation &&
            item.firstConversation.details &&
            item.firstConversation.details
              .toLowerCase()
              .includes(text.toLowerCase())) ||
          (item.lastConversation &&
            item.lastConversation.date &&
            item.lastConversation.date
              .toLowerCase()
              .includes(text.toLowerCase())) ||
          (item.lastConversation &&
            item.lastConversation.details &&
            item.lastConversation.details
              .toLowerCase()
              .includes(text.toLowerCase())) ||
          (item.nextConversationDate &&
            item.nextConversationDate
              .toString()
              .toLowerCase()
              .includes(text.toLowerCase())) ||
          (item.presentStatus &&
            item.presentStatus.toLowerCase().includes(text.toLowerCase())) ||
          (item.closingStatement &&
            item.closingStatement.toLowerCase().includes(text.toLowerCase()))
      );
    // console.log("filteredData", filteredData);
    setTableData(filteredData);
  };
  useEffect(() => {
    if (!text) {
      setTableData(copyOfTableData);
    }
  }, [text, copyOfTableData]);

  // print the table
  const printLeadGenerationTable = () => {
    return (
      tableData &&
      tableData.map((data, index) => {
        return (
          <tr key={index}>
            {/* Sr. NO. */}
            <td>{index + 1}</td>

            {/* bucket */}
            <td>
              <select
                name="bucket"
                className="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500 m-2"
                value={data.bucket}
                onChange={(e) =>
                  updateField(data._id, "bucket", e.target.value)
                }
              >
                <option value="Cold">Cold</option>
                <option value="Worm">Worm</option>
                <option value="Hot">Hot</option>
                <option value="Converted">Converted</option>
                <option value="Not-Converted">Not Converted</option>
                <option value="Follow Up Later">Follow Up Later</option>
              </select>
            </td>

            {/* status */}
            <td>
              <select
                name="status"
                className="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500 m-2"
                value={data.status}
                onChange={(e) =>
                  updateField(data._id, "status", e.target.value)
                }
              >
                <option value="New">New</option>
                <option value="Contacted">Contacted</option>
                <option value="Qualified">Qualified</option>
                <option value="Follow Up Requirred">Follow Up Requirred</option>
                <option value="Proposal Sent">Proposal Sent</option>
                <option value="Negotiation Stage">Negotiation Stage</option>
                <option value="Lost">Lost</option>
                <option value="Deal Closed">Deal Closed</option>
                <option value="Meeting Requested">Meeting Requested</option>
                <option value="Researching">Researching</option>
                <option value="Budget Approval Needed">
                  Budget Approval Needed
                </option>
                <option value="Initial Contact Made">
                  Initial Contact Made
                </option>
                <option value="Solution Proposed">Solution Proposed</option>
                <option value="Decision Delayed">Decision Delayed</option>
                <option value="DNP">DNP</option>
                <option value="Meeting Scheduled">Meeting Scheduled</option>
              </select>
            </td>

            {/* Lead Generation Date */}
            <td>{moment(data.leadGenerationDate).format("YYYY-MM-DD")}</td>

            {/* Clinet Name */}
            <td>
              <input
                type="text"
                value={data.clientName}
                onChange={(e) =>
                  updateField(data._id, "clientName", e.target.value)
                }
              />
            </td>

            {/* Client Organisation */}
            <td>
              <input
                type="text"
                value={data.clientOrganisation}
                onChange={(e) =>
                  updateField(data._id, "clientOrganisation", e.target.value)
                }
              />
            </td>

            {/* Client Designation */}
            <td>
              <input
                type="text"
                value={data.clientDesignation}
                onChange={(e) =>
                  updateField(data._id, "clientDesignation", e.target.value)
                }
              />
            </td>

            {/* Client Mobile Number */}
            <td>
              <input
                type="number"
                value={data.clientMobileNumber}
                onChange={(e) =>
                  updateField(data._id, "clientMobileNumber", e.target.value)
                }
              />
            </td>

            {/* Client Whatsapp Number */}
            <td>
              <input
                type="number"
                value={data.clientWhatsappNumber}
                onChange={(e) =>
                  updateField(data._id, "clientWhatsappNumber", e.target.value)
                }
              />
            </td>

            {/* Client Mail Id */}
            <td>
              <input
                type="email"
                value={data.clientMailId}
                onChange={(e) =>
                  updateField(data._id, "clientMailId", e.target.value)
                }
              />
            </td>

            {/* Service Categories */}
            <td>
              <select
                name="bucket"
                className="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500 m-2"
                value={data.serviceCategories}
                onChange={(e) =>
                  updateField(data._id, "serviceCategories", e.target.value)
                }
              >
                <option value="Web-Development">Web Development</option>
                <option value="Consulting">Consulting</option>
                <option value="Suggestion">Suggestion</option>
              </select>
            </td>

            {/* Demand */}
            <td>
              <Popover>
                <PopoverTrigger>
                  <Button>Show</Button>
                </PopoverTrigger>
                <PopoverContent>
                  <PopoverArrow />
                  <PopoverCloseButton />
                  <PopoverHeader>Demand</PopoverHeader>
                  <PopoverBody>
                    <textarea
                      name="demand"
                      cols="30"
                      rows="10"
                      onChange={(e) =>
                        updateField(data._id, "demand", e.target.value)
                      }
                    >
                      {data.demand}
                    </textarea>
                  </PopoverBody>
                </PopoverContent>
              </Popover>
            </td>

            {/* Remarks */}
            <td>
              <Popover>
                <PopoverTrigger>
                  <Button>Show</Button>
                </PopoverTrigger>
                <PopoverContent>
                  <PopoverArrow />
                  <PopoverCloseButton />
                  <PopoverHeader>Remarks</PopoverHeader>
                  <PopoverBody>{data.remarks}</PopoverBody>
                </PopoverContent>
              </Popover>
            </td>

            {/* First Conversation Date */}
            <td>
              <input
                type="date"
                value={
                  data.firstConversation && data.firstConversation.date
                    ? data.firstConversation &&
                      moment(data.firstConversation.date).format("YYYY-MM-DD")
                    : ""
                }
                onChange={(e) =>
                  updateField(data._id, "firstConversationDate", e.target.value)
                }
              />
            </td>

            {/* First Conversation Details */}
            <td>
              <Popover>
                <PopoverTrigger>
                  <Button>Show</Button>
                </PopoverTrigger>
                <PopoverContent>
                  <PopoverArrow />
                  <PopoverCloseButton />
                  <PopoverHeader>First Conversation Details</PopoverHeader>
                  <PopoverBody>
                    <textarea
                      name="firstConversationDetails"
                      cols="30"
                      rows="10"
                      onChange={(e) =>
                        updateField(
                          data._id,
                          "firstConversationDetails",
                          e.target.value
                        )
                      }
                    >
                      {data.firstConversation && data.firstConversation.details}
                    </textarea>
                  </PopoverBody>
                </PopoverContent>
              </Popover>
            </td>

            {/* Last Conversation Date */}
            <td>
              <input
                type="date"
                value={
                  data.lastConversation && data.lastConversation.date
                    ? data.lastConversation &&
                      moment(data.lastConversation.date).format("YYYY-MM-DD")
                    : ""
                }
                onChange={(e) =>
                  updateField(data._id, "lastConversationDate", e.target.value)
                }
              />
            </td>

            {/* Last Conversation Details */}
            <td>
              <Popover>
                <PopoverTrigger>
                  <Button>Show</Button>
                </PopoverTrigger>
                <PopoverContent>
                  <PopoverArrow />
                  <PopoverCloseButton />
                  <PopoverHeader>Last Conversation Details</PopoverHeader>
                  <PopoverBody>
                    <textarea
                      name="lastConversationDetails"
                      cols="30"
                      rows="10"
                      onChange={(e) =>
                        updateField(
                          data._id,
                          "lastConversationDetails",
                          e.target.value
                        )
                      }
                    >
                      {data.lastConversation && data.lastConversation.details}
                    </textarea>
                  </PopoverBody>
                </PopoverContent>
              </Popover>
            </td>

            {/* Next Conversation Date */}
            <td>
              <input
                type="date"
                value={
                  data.nextConversationDate
                    ? moment(data.nextConversationDate).format("YYYY-MM-DD")
                    : ""
                }
                onChange={(e) =>
                  updateField(data._id, "nextConversationDate", e.target.value)
                }
              />
            </td>

            {/* Present Status */}
            <td>
              <input
                type="text"
                value={data.presentStatus}
                onChange={(e) =>
                  updateField(data._id, "presentStatus", e.target.value)
                }
              />
            </td>

            {/* Closing Statement */}
            <td>
              <Popover>
                <PopoverTrigger>
                  <Button>Show</Button>
                </PopoverTrigger>
                <PopoverContent>
                  <PopoverArrow />
                  <PopoverCloseButton />
                  <PopoverHeader>Closing Statement</PopoverHeader>
                  <PopoverBody>
                    <textarea
                      name="closingStatement"
                      cols="30"
                      rows="10"
                      onChange={(e) =>
                        updateField(
                          data._id,
                          "closingStatement",
                          e.target.value
                        )
                      }
                    >
                      {data.closingStatement}
                    </textarea>
                  </PopoverBody>
                </PopoverContent>
              </Popover>
            </td>

            {/* Delete Action */}
            <td>
              <button type="button" onClick={(e) => deleteLead(data._id)}>
                <FontAwesomeIcon icon={faTrash} color="red" />
              </button>
            </td>
          </tr>
        );
      })
    );
  };

  // update table field
  const updateField = async (_id, fieldName, newFieldValue) => {
    // find that data-array in the array of data-array : table data
    let index;
    for (let i = 0; i < tableData.length; i++) {
      if (tableData[i]._id === _id) {
        index = i;
        break;
      }
    }

    // now change from local data : table data and copy of table data
    let update = [...tableData];
    switch (fieldName) {
      case "firstConversationDate":
        update[index].firstConversation.date = newFieldValue;
        break;
      case "lastConversationDate":
        update[index].lastConversation.date = newFieldValue;
        break;
      default:
        update[index][fieldName] = newFieldValue;
    }
    setTableData(update);
    setCopyOfTableData(update);

    // now, make a request to server
    try {
      const res = await updateLeadGenerationDataField(
        _id,
        fieldName,
        newFieldValue
      );
      const json = await res.json();
      if (json.success === true) {
        if (tableData.length !== total) {
          window.location.reload();
        }
      } else {
        toast.error(json.message);
      }
    } catch (err) {}
  };

  // //! delete Lead By DBId
  const deleteLead = async (DBId) => {
    try {
      const res = await deleteLeadByDBId(DBId);
      const json = await res.json();
      if (json.success === true) {
        toast.success("Lead deleted successfully.");

        if (tableData.length === total) {
          let index;
          for (let i = 0; i < tableData.length; i++) {
            if (tableData[i]._id === DBId) {
              index = i;
              break;
            }
          }
          let update = [...tableData];
          update.splice(index, 1);
          setTableData(update);
          setCopyOfTableData(update);
        } else {
          window.location.reload();
        }
      } else {
        toast.error(json.error);
      }
    } catch (err) {}
  };

  // //! ...............................................Lead Generation form ................................................

  // //! handle lead generation form field change
  const handleLeadGenerationFormFieldChange = (e) => {
    setCredentials({ ...credentials, [e.target.name]: e.target.value });
  };

  // //! handle lead generation form submit
  const handleLeadGenerationFormSubmit = async (e) => {
    e.preventDefault();
    try {
      const res = await generateNewLead(
        credentials.clientName,
        credentials.clientDesignation,
        credentials.clientOrganisation,
        credentials.clientMobileNumber,
        credentials.clientWhatsappNumber,
        credentials.clientMailId,
        credentials.serviceCategories,
        credentials.demand,
        credentials.firstConversationDate
      );
      const json = await res.json();
      console.log(json);
      if (json.success === true) {
        toast.success("Lead generated successfully...");
      } else {
        toast.error("Try again...");
      }
    } catch (err) {
      // console.log(err);
    }
  };

  return (
    <>
      {/* Sidebar toggle button :- not for small devices :- min-width : 1024px  */}
      <div className="navbar-toggle-test-second">
        {openSidebar ? (
          <button
            type="button"
            onClick={(e) => {
              setOpenSidebar(!openSidebar);
            }}
          >
            <i>
              <FontAwesomeIcon icon={faTimes} />
            </i>
          </button>
        ) : (
          <button type="button" onClick={(e) => setOpenSidebar(!openSidebar)}>
            <i>
              <FontAwesomeIcon icon={faBars} />
            </i>
          </button>
        )}
      </div>

      {/* global-container */}
      <div className="global-container lg:flex">
        {/* side bar component */}
        {openSidebar && <ProvideSidebar />}

        <div className="page-comp w-full min-w-0 flex-auto lg:static lg:max-h-full lg:overflow-visible">
          <div className="lead-generation-container">
            <div className="lead-generation-heading">
              <p>Lead Generation</p>
            </div>
            <div className="lead-generation-person-info-section">
              <div className="lead-generation-person-info-section-heading">
                <p>Employee Information</p>
              </div>
              <div className="lead-generation-person-info-section-info">
                <p>
                  <i>
                    <FontAwesomeIcon icon={faIdBadge} />
                  </i>
                  <span>EMP. ID :</span> {profileData && profileData.employeeID}
                </p>
                <p>
                  <i>
                    <FontAwesomeIcon icon={faIdBadge} />
                  </i>
                  <span>EMP. Name :</span> {profileData && profileData.name}
                </p>
                {/* <p>
              <i>
                <FontAwesomeIcon icon={faIdBadge} />
              </i>
              <span>Team Name :</span> Jonny
            </p> */}
              </div>
            </div>
            <div className="lead-generation-header">
              <div className={openTable ? "activeTab" : ""}>
                <button type="button" onClick={() => handleTab()}>
                  Lead Generation Table
                </button>
              </div>
              <div className={!openTable ? "activeTab" : ""}>
                <button type="button" onClick={() => handleTab()}>
                  Lead Generation Form
                </button>
              </div>
            </div>

            {openTable ? (
              <>
                {/* Lead Generation Table */}
                {loading ? (
                  <RotatingTrianglesComp />
                ) : (
                  <>
                    <div className="search-bar-first-form all-allocated-task-search-form">
                      <form>
                        <div>
                          <label htmlFor="startDate">Start Date</label>
                          <input
                            type="date"
                            value={startDate}
                            id="startDate"
                            onChange={(e) => setStartDate(e.target.value)}
                            placeholder="Select Start Date"
                            required
                          />
                        </div>

                        <div>
                          <label htmlFor="endDate">End Date</label>
                          <input
                            type="date"
                            value={endDate}
                            id="endDate"
                            onChange={(e) => setEndDate(e.target.value)}
                            placeholder="Select End Date"
                            required
                          />
                        </div>

                        <div>
                          <button type="button" onClick={(e) => fetchData()}>
                            Display Data
                          </button>
                        </div>
                      </form>
                    </div>

                    <div className="lead-generation-table">
                      <div className="table">
                        <div className="table_header">
                          <p>Lead Generation Table</p>
                          <div>
                            <input
                              type="text"
                              placeholder="Enter any text"
                              value={text}
                              onChange={(e) => setText(e.target.value)}
                            />
                            <button type="button" onClick={handleSearch}>
                              Search
                            </button>
                          </div>
                        </div>
                        <div className="table_section">
                          <table>
                            <thead>
                              <tr>
                                <th>S. No.</th>
                                <th>
                                  Bucket{" "}
                                  <i>
                                    <FontAwesomeIcon icon={faEdit} />
                                  </i>
                                </th>
                                <th>
                                  Status{" "}
                                  <i>
                                    <FontAwesomeIcon icon={faEdit} />
                                  </i>
                                </th>
                                <th>Lead Generation Date</th>
                                <th>
                                  Name of Client{" "}
                                  <i>
                                    <FontAwesomeIcon icon={faEdit} />
                                  </i>
                                </th>
                                <th>
                                  Client Organisation{" "}
                                  <i>
                                    <FontAwesomeIcon icon={faEdit} />
                                  </i>
                                </th>
                                <th>
                                  Client Designation{" "}
                                  <i>
                                    <FontAwesomeIcon icon={faEdit} />
                                  </i>
                                </th>
                                <th>
                                  Client Mobile Number{" "}
                                  <i>
                                    <FontAwesomeIcon icon={faEdit} />
                                  </i>
                                </th>
                                <th>
                                  Client Whatsapp Number{" "}
                                  <i>
                                    <FontAwesomeIcon icon={faEdit} />
                                  </i>
                                </th>
                                <th>
                                  Client Mail Id{" "}
                                  <i>
                                    <FontAwesomeIcon icon={faEdit} />
                                  </i>
                                </th>
                                <th>
                                  Service Categories{" "}
                                  <i>
                                    <FontAwesomeIcon icon={faEdit} />
                                  </i>
                                </th>
                                <th>
                                  Demand{" "}
                                  <i>
                                    <FontAwesomeIcon icon={faEdit} />
                                  </i>
                                </th>
                                <th>Remarks</th>
                                <th>
                                  First Conversation Date{" "}
                                  <i>
                                    <FontAwesomeIcon icon={faEdit} />
                                  </i>
                                </th>
                                <th>
                                  First Conversation Details{" "}
                                  <i>
                                    <FontAwesomeIcon icon={faEdit} />
                                  </i>
                                </th>
                                <th>
                                  Last Conversation Date{" "}
                                  <i>
                                    <FontAwesomeIcon icon={faEdit} />
                                  </i>
                                </th>
                                <th>
                                  Last Conversation Details{" "}
                                  <i>
                                    <FontAwesomeIcon icon={faEdit} />
                                  </i>
                                </th>
                                <th>
                                  Next Conversation Date{" "}
                                  <i>
                                    <FontAwesomeIcon icon={faEdit} />
                                  </i>
                                </th>
                                <th>
                                  Present Status{" "}
                                  <i>
                                    <FontAwesomeIcon icon={faEdit} />
                                  </i>
                                </th>
                                <th>
                                  Closing Statement{" "}
                                  <i>
                                    <FontAwesomeIcon icon={faEdit} />
                                  </i>
                                </th>
                                <th>Action</th>
                              </tr>
                            </thead>
                            <tbody>{printLeadGenerationTable()}</tbody>
                          </table>
                        </div>
                      </div>
                    </div>
                  </>
                )}
              </>
            ) : (
              <>
                {/* Lead Generation Form */}
                <div className="lead-allocation-form">
                  <div className="form-container lead-allocation-form-container">
                    <form onSubmit={handleLeadGenerationFormSubmit}>
                      <div className="form-heading">
                        <p>Generate New Lead</p>
                      </div>

                      {/* client name */}
                      <div className="form-field">
                        <label htmlFor="clientName">Client Name</label>
                        <input
                          type="text"
                          id="clientName"
                          name="clientName"
                          placeholder="Client Name"
                          onChange={handleLeadGenerationFormFieldChange}
                          required
                        />
                      </div>

                      {/* Client Organisation */}
                      <div className="form-field">
                        <label htmlFor="clientOrganisation">
                          Client Organisation
                        </label>
                        <input
                          type="text"
                          id="clientOrganisation"
                          name="clientOrganisation"
                          placeholder="Client Organisation"
                          onChange={handleLeadGenerationFormFieldChange}
                        />
                      </div>

                      {/* Client Designation */}
                      <div className="form-field">
                        <label htmlFor="clientDesignation">
                          Client Designation
                        </label>
                        <input
                          type="text"
                          id="clientDesignation"
                          name="clientDesignation"
                          placeholder="Client Designation"
                          onChange={handleLeadGenerationFormFieldChange}
                          required
                        />
                      </div>

                      {/* Client Mobile Number */}
                      <div className="form-field">
                        <label htmlFor="mb">Client Mobile Number</label>
                        <input
                          type="number"
                          id="mb"
                          name="clientMobileNumber"
                          placeholder="Client Mobile Number"
                          onChange={handleLeadGenerationFormFieldChange}
                          required
                        />
                      </div>

                      {/* Client Whatsapp Number */}
                      <div className="form-field">
                        <label htmlFor="whatsappN">
                          Client Whatsapp Number
                        </label>
                        <input
                          type="number"
                          id="whatsappN"
                          name="clientWhatsappNumber"
                          placeholder="Client Whatsapp Number"
                          onChange={handleLeadGenerationFormFieldChange}
                        />
                      </div>

                      {/* Client Mail Id */}
                      <div className="form-field">
                        <label htmlFor="mailId">Client Mail Id</label>
                        <input
                          type="email"
                          id="mailId"
                          name="clientMailId"
                          placeholder="Client Mail Id"
                          onChange={handleLeadGenerationFormFieldChange}
                        />
                      </div>

                      {/* Service Categories */}
                      <div className="form-field">
                        <label htmlFor="serviceCatg">Service Categories</label>
                        <select
                          name="serviceCategories"
                          id="serviceCatg"
                          onChange={handleLeadGenerationFormFieldChange}
                          className="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-coral-500 focus:border-coral-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-coral-500 dark:focus:border-coral-500"
                        >
                          <option value="Web-Development" defaultChecked>
                            Web Development
                          </option>
                          <option value="Consulting">Consulting</option>
                          <option value="Suggestion">Suggestion</option>
                        </select>
                      </div>

                      {/* demand */}
                      <div className="form-field">
                        <label htmlFor="demand">Demand</label>
                        <input
                          type="text"
                          name="demand"
                          id="demand"
                          placeholder="Demand"
                          onChange={handleLeadGenerationFormFieldChange}
                        />
                      </div>

                      {/* First Conversation Date */}
                      <div className="form-field">
                        <label htmlFor="fcdate">First Conversation Date</label>
                        <input
                          type="date"
                          id="fcdate"
                          name="firstConversationDate"
                          onChange={handleLeadGenerationFormFieldChange}
                        />
                      </div>

                      {/* form buttons */}
                      <div className="form-buttons">
                        <button type="button">Cancel</button>
                        <button type="submit">Submit</button>
                      </div>
                    </form>
                  </div>
                </div>
              </>
            )}
          </div>
        </div>
      </div>
    </>
  );
}
